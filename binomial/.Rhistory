#' @param k number of successes
#' @param p probability of success
#' @return binomial probability that given parameters would be true integer
#' @export
#' @examples 0.3125
bin_probability <- function (k = 2, n = 5, p = 0.5){
check_trials(n)
check_prob(p)
check_success(n,k)
bin_choose(n,k) *
p**k * ((1-p)**(n-k))
}
1.5
devtools::test()
# check_prob
# checks whether or not a probability is valid (0-1)
# if the probability is not within this range it returns an error
# takes one argument (p)
check_prob <- function( p = .5){
if (sum(p > 1)){
stop('p has to be a number between 0 and 1')
}
if (sum(p < 0)){
stop('p has to be a number between 0 and 1')
}
if (sum(!is.numeric(p))) {
stop ("'p' must be a numeric object")
}
return(TRUE)
}
# check_trials
# tests if input 'trials' is valid input (non-negative number & decimal)
# if given negative will error, if true will return TRUE
# takes one argument (n)
check_trials <- function( n = 5){
if (sum(n < 0)){
stop('invalid number of trials')
}
if (sum(0 < n & n < 1)){
stop('invalid number of trials')
}
if (sum(!is.numeric(n))) {
stop("'n' must be a numeric object")
}
return(TRUE)
}
# check_success
# tests if an input for number of success is valid (greater than 0 but smaller than trials(n))
# if invalid will error
# takes two arguments (k and n)
# n should be a vector of non-negative numbers lessthan or equal to n
check_success <- function( n = 5, k = 2){
if (sum(k < 0)) {
stop('invalid success value')
}
if (sum(k < 1 & k > 0)){
stop('success cannot be a decimal')
}
if (sum(k > n)){
stop('successes cannot be larger than trials')
}
if (sum(!is.numeric(n)) | (sum(!is.numeric(k)))) {
stop ("'n' and 'k' must be numeric objects")
}
return(TRUE)
}
#' @title bin_choose
#' @description gives number of successes in given number of trials
#' @param n number of trials
#' @param k number of successes
#' @return the number of combinations where k successes happen in n trials
#' @export
#' @examples 10
bin_choose <- function( n = 5, k = 2){
check_trials(n)
check_success(n,k)
if (sum(k - n > 0)){
stop('k cannot be greater than n')
}
x <- n-k
sapply(n,factorial) / ((sapply(k,factorial)) * sapply(x,factorial))
}
#' @title bin_probability
#' @description computes the binomial probability
#' @param n number of trials
#' @param k number of successes
#' @param p probability of success
#' @return binomial probability that given parameters would be true integer
#' @export
#' @examples 0.3125
bin_probability <- function (k = 2, n = 5, p = 0.5){
check_trials(n)
check_prob(p)
check_success(n,k)
bin_choose(n,k) *
p**k * ((1-p)**(n-k))
}
1.5
#' @title bin_distribution
#' @description gives a dataframe with successes and probabilities
#' @param n trials
#' @param p probability of success
#' @return returns dataframe with amount of success for each number of trials
#' @export
#' @examples
bin_distribution <- function(n = 5, p = 0.5){
check_trials(n)
check_prob(p)
df <- data.frame(success = 0:n, probability = bin_probability(0:n,n,p))
class(df) <- c('bindis','data.frame')
return(df)
}
bin_distribution()
devtools::check_man()
devtools::check_man()
#' @title bin_choose
#' @description gives number of successes in given number of trials
#' @param n number of trials
#' @param k number of successes
#' @return the number of combinations where k successes happen in n trials
#' @export
#' @examples 10
bin_choose <- function( n = 5, k = 2){
check_trials(n)
check_success(n,k)
if (sum(k - n > 0)){
stop('k cannot be greater than n')
}
x <- n-k
sapply(n,factorial) / ((sapply(k,factorial)) * sapply(x,factorial))
}
#' @title bin_probability
#' @description computes the binomial probability
#' @param n number of trials
#' @param k number of successes
#' @param p probability of success
#' @return binomial probability that given parameters would be true integer
#' @export
#' @examples 0.3125
bin_probability <- function (k = 2, n = 5, p = 0.5){
check_trials(n)
check_prob(p)
check_success(n,k)
bin_choose(n,k) *
p**k * ((1-p)**(n-k))
}
bin_choose(5,2)
bin_choose(5,0)
knitr::opts_chunk$set(collapse = TRUE,comment = "#>")
library(binomial)
#shift+command+B
bin_cumulative( n = 5, p = 0.5)
#' @title bin_choose
#' @description gives number of successes in given number of trials
#' @param n number of trials
#' @param k number of successes
#' @return the number of combinations where k successes happen in n trials
#' @export
#' @examples 10
bin_choose <- function( n = 5, k = 2){
check_trials(n)
check_success(n,k)
if (sum(k - n > 0)){
stop('k cannot be greater than n')
}
x <- n-k
sapply(n,factorial) / ((sapply(k,factorial)) * sapply(x,factorial))
}
bin_choose(5,2)
devtools::test()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
bin_cumulative( n = 5, p = 0.5)
bin_cumulative( 5,-0.5)
bin_cumulative( 5, .5)
bin_cumulative( 5, .3)
bin_distribution()
bin_probability(0:4,5,0.5)
bin_probability(2,5,0.5:0.8)
bin_probability(2,5:7,.5)
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- data.frame(success = 0:n,
probability = bin_probability(0:n,n,p),
cumulative = cumsum(df$probability))
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative()
# check_prob
# checks whether or not a probability is valid (0-1)
# if the probability is not within this range it returns an error
# takes one argument (p)
check_prob <- function( p = .5){
if (sum(p > 1)){
stop('p has to be a number between 0 and 1')
}
if (sum(p < 0)){
stop('p has to be a number between 0 and 1')
}
if (sum(!is.numeric(p))) {
stop ("'p' must be a numeric object")
}
return(TRUE)
}
# check_trials
# tests if input 'trials' is valid input (non-negative number & decimal)
# if given negative will error, if true will return TRUE
# takes one argument (n)
check_trials <- function( n = 5){
if (sum(n < 0)){
stop('invalid number of trials')
}
if (sum(0 < n & n < 1)){
stop('invalid number of trials')
}
if (sum(!is.numeric(n))) {
stop("'n' must be a numeric object")
}
return(TRUE)
}
# check_success
# tests if an input for number of success is valid (greater than 0 but smaller than trials(n))
# if invalid will error
# takes two arguments (k and n)
# n should be a vector of non-negative numbers lessthan or equal to n
check_success <- function( n = 5, k = 2){
if (sum(k < 0)) {
stop('invalid success value')
}
if (sum(k < 1 & k > 0)){
stop('success cannot be a decimal')
}
if (sum(k > n)){
stop('successes cannot be larger than trials')
}
if (sum(!is.numeric(n)) | (sum(!is.numeric(k)))) {
stop ("'n' and 'k' must be numeric objects")
}
return(TRUE)
}
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- data.frame(success = 0:n,
probability = bin_probability(0:n,n,p),
cumulative = cumsum(df$probability))
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative()
bin_probability(0:4,5,0.5)
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- data.frame(success = 0:n,
probability = bin_probability(0:n,n,p),
cumulative = cumsum(probability))
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative()
```{r setup, include = FALSE}
library(binomial)
#shift+command+B
bin_choose( n = 5, k = 2)
bin_probability(k = 2, n = 5, p = 0.5)
plot(bin1)
bin1 <- bin_distribution(n = 5, p = 0.5)
bin1
plot(bin1)
bin_variable(n = 5, p = 0.5)
bin1 <- bin_variable( n = 10, p = 0.3)
binsum <- summary(bin1)
binsum
bin_mean( n = 10, p = 0.3)
bin_variance(n = 10, p = 0.3)
bin_mode( n = 10, p = 0.3)
bin_skewness( n = 10, p = 0.3)
bin_kurtosis( n = 10, p = 0.3)
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- data.frame(success = 0:n, probability = bin_probability(0:n,n,p), cumulative = cumsum(probability))
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative()
```{r setup, include = FALSE}
knitr::opts_chunk$set(collapse = TRUE,comment = "#>")
library(binomial)
#shift+command+B
bin_cumulative( n = 5, p = 0.5)
bin_cumulative( n = 5, p = 0.5)
```{r setup, include = FALSE}
knitr::opts_chunk$set(collapse = TRUE,comment = "#>")
library(binomial)
#shift+command+B
bin_choose( n = 5, k = 2)
bin_probability(k = 2, n = 5, p = 0.5)
bin1 <- bin_distribution(n = 5, p = 0.5)
bin1
plot(bin1)
bin_cumulative( n = 5, p = 0.5)
bin_choose( n = 5, k = 2)
bin_probability(k = 2, n = 5, p = 0.5)
bin1 <- bin_distribution(n = 5, p = 0.5)
bin1
plot(bin1)
bin_cumulative( n = 5, p = 0.5)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check_man()
devtools::test()
devtools::test()
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- bin_distribution(n,p)
cumulative <- cumsum(df$probability)
df$cumulative <- cumulative
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative(5, 1)
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- bin_distribution(n,p)
cumulative <- cumsum(df$probability)
df$cumulative <- cumulative
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative(5, 1)
bin_cumulative(5, 0.6)
# check_prob
# checks whether or not a probability is valid (0-1)
# if the probability is not within this range it returns an error
# takes one argument (p)
check_prob <- function( p = .5){
if (sum(p > 1)){
stop('p has to be a number between 0 and 1')
}
if (sum(p < 0)){
stop('p has to be a number between 0 and 1')
}
if (sum(!is.numeric(p))) {
stop ("'p' must be a numeric object")
}
return(TRUE)
}
# check_trials
# tests if input 'trials' is valid input (non-negative number & decimal)
# if given negative will error, if true will return TRUE
# takes one argument (n)
check_trials <- function( n = 5){
if (sum(n < 0)){
stop('invalid number of trials')
}
if (sum(0 < n & n < 1)){
stop('invalid number of trials')
}
if (sum(!is.numeric(n))) {
stop("'n' must be a numeric object")
}
return(TRUE)
}
# check_success
# tests if an input for number of success is valid (greater than 0 but smaller than trials(n))
# if invalid will error
# takes two arguments (k and n)
# n should be a vector of non-negative numbers lessthan or equal to n
check_success <- function( n = 5, k = 2){
if (sum(k < 0)) {
stop('invalid success value')
}
if (sum(k < 1 & k > 0)){
stop('success cannot be a decimal')
}
if (sum(k > n)){
stop('successes cannot be larger than trials')
}
if (sum(!is.numeric(n)) | (sum(!is.numeric(k)))) {
stop ("'n' and 'k' must be numeric objects")
}
return(TRUE)
}
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- bin_distribution(n,p)
cumulative <- cumsum(df$probability)
df$cumulative <- cumulative
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative(5, 1)
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- bin_distribution(n,p)
cumulative <- cumsum(df$probability)
df$cumulative <- cumulative
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative(5, 1)
getwd()
#' @title bin_cumulative
#' @description returns dataframe with both the probabilities and the successes in the first column
#' @param n number of trials
#' @param p probability of success
#' @return dataframe with successes and cumulative successes
#' @export
#' @examples
bin_cumulative <- function(n= 5, p= 0.5){
check_trials(n)
check_prob(p)
df <- bin_distribution(n,p)
cumulative <- cumsum(df$probability)
df$cumulative <- cumulative
class(df) <- c('bincum','data.frame')
return(df)
}
bin_cumulative(5, 2)
devtools::test()
bin_cumulative(9,1.1)
bin_cumulative(9,0.9:1.1)
bin_cumulative(9,0.9)
bin_distribution(5, 0.9:1.1)
bin_distribution(5, 'a')
bin_distribution(5, -1)
bin_distribution(5, 2)
bin_distribution(5, 1.1)
bin_distribution(5, -.9)
bin_distribution(5, -.9:1)
bin_distribution(5, (-.9:1))
bin_distribution(5, (0.9:1.1))
bin_distribution(5,1)
bin_distribution(5,0.9)
devtools::test()
devtools::test()
devtools::build_vignettes()
bin_cumulative(9,0.9)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::install()
